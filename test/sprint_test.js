import { describe, it } from "jsr:@std/testing/bdd";
import { assertEquals } from "jsr:@std/assert";
import { getCodeCopy, sprintRunner } from "../src/sprintLib.js";

describe("getCodeCopy", () => {
  it("should return a new array with 0 unshifted to it", () => {
    assertEquals(getCodeCopy([1, 2, 3, 4, 5]), [0, 1, 2, 3, 4, 5]);
  });
});

describe("sprintRunner", () => {
  it("should return executed code", () => {
    const input =
      "3 9 1 2 3 4 5 0 3 16 0 5 0 0 1 1 3 4 11 1 5 11 11 1 6 11 11 1 7 11 11 7 11 13 2 13 12 13 1 14 15 14 5 13 12 49 3 35 7 14 8 9";
    const expected = {
      inputCode: [
        3,
        9,
        1,
        2,
        3,
        4,
        5,
        0,
        3,
        16,
        0,
        5,
        0,
        0,
        1,
        1,
        3,
        4,
        11,
        1,
        5,
        11,
        11,
        1,
        6,
        11,
        11,
        1,
        7,
        11,
        11,
        7,
        11,
        13,
        2,
        13,
        12,
        13,
        1,
        14,
        15,
        14,
        5,
        13,
        12,
        49,
        3,
        35,
        7,
        14,
        8,
        9,
      ],
      executedCode: [
        3,
        9,
        1,
        2,
        3,
        4,
        5,
        3,
        3,
        16,
        15,
        5,
        0,
        3,
        1,
        1,
        3,
        4,
        11,
        1,
        5,
        11,
        11,
        1,
        6,
        11,
        11,
        1,
        7,
        11,
        11,
        7,
        11,
        13,
        2,
        13,
        12,
        13,
        1,
        14,
        15,
        14,
        5,
        13,
        12,
        49,
        3,
        35,
        7,
        14,
        8,
        9,
      ],
    };
    assertEquals(sprintRunner(input), expected);
  });
});
